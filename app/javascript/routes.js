/*
File generated by js-routes 1.4.14
Based on Rails 6.0.3.5 routes of Chatfuel::Application
 */

(function() {
  var DeprecatedGlobbingBehavior, NodeTypes, ParameterMissing, ReservedOptions, SpecialOptionsKey, UriEncoderSegmentRegex, Utils, error, result,
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  ParameterMissing = function(message, fileName, lineNumber) {
    var instance;
    instance = new Error(message, fileName, lineNumber);
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(instance, Object.getPrototypeOf(this));
    } else {
      instance.__proto__ = this.__proto__;
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(instance, ParameterMissing);
    }
    return instance;
  };

  ParameterMissing.prototype = Object.create(Error.prototype, {
    constructor: {
      value: Error,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });

  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ParameterMissing, Error);
  } else {
    ParameterMissing.__proto__ = Error;
  }

  NodeTypes = {"GROUP":1,"CAT":2,"SYMBOL":3,"OR":4,"STAR":5,"LITERAL":6,"SLASH":7,"DOT":8};

  DeprecatedGlobbingBehavior = false;

  SpecialOptionsKey = "_options";

  UriEncoderSegmentRegex = /[^a-zA-Z0-9\-\._~!\$&'\(\)\*\+,;=:@]/g;

  ReservedOptions = ['anchor', 'trailing_slash', 'subdomain', 'host', 'port', 'protocol'];

  Utils = {
    configuration: {
      prefix: "",
      default_url_options: {},
      special_options_key: "_options",
      serializer: null
    },
    default_serializer: function(object, prefix) {
      var element, i, j, key, len, prop, s;
      if (prefix == null) {
        prefix = null;
      }
      if (object == null) {
        return "";
      }
      if (!prefix && !(this.get_object_type(object) === "object")) {
        throw new Error("Url parameters should be a javascript hash");
      }
      s = [];
      switch (this.get_object_type(object)) {
        case "array":
          for (i = j = 0, len = object.length; j < len; i = ++j) {
            element = object[i];
            s.push(this.default_serializer(element, prefix + "[]"));
          }
          break;
        case "object":
          for (key in object) {
            if (!hasProp.call(object, key)) continue;
            prop = object[key];
            if ((prop == null) && (prefix != null)) {
              prop = "";
            }
            if (prop != null) {
              if (prefix != null) {
                key = prefix + "[" + key + "]";
              }
              s.push(this.default_serializer(prop, key));
            }
          }
          break;
        default:
          if (object != null) {
            s.push((encodeURIComponent(prefix.toString())) + "=" + (encodeURIComponent(object.toString())));
          }
      }
      if (!s.length) {
        return "";
      }
      return s.join("&");
    },
    serialize: function(object) {
      var custom_serializer;
      custom_serializer = this.configuration.serializer;
      if ((custom_serializer != null) && this.get_object_type(custom_serializer) === "function") {
        return custom_serializer(object);
      } else {
        return this.default_serializer(object);
      }
    },
    clean_path: function(path) {
      var last_index;
      path = path.split("://");
      last_index = path.length - 1;
      path[last_index] = path[last_index].replace(/\/+/g, "/");
      return path.join("://");
    },
    extract_options: function(number_of_params, args) {
      var last_el, options;
      last_el = args[args.length - 1];
      if ((args.length > number_of_params && last_el === void 0) || ((last_el != null) && "object" === this.get_object_type(last_el) && !this.looks_like_serialized_model(last_el))) {
        options = args.pop() || {};
        delete options[this.configuration.special_options_key];
        return options;
      } else {
        return {};
      }
    },
    looks_like_serialized_model: function(object) {
      return !object[this.configuration.special_options_key] && ("id" in object || "to_param" in object);
    },
    path_identifier: function(object) {
      var property;
      if (object === 0) {
        return "0";
      }
      if (!object) {
        return "";
      }
      property = object;
      if (this.get_object_type(object) === "object") {
        if ("to_param" in object) {
          if (object.to_param == null) {
            throw new ParameterMissing("Route parameter missing: to_param");
          }
          property = object.to_param;
        } else if ("id" in object) {
          if (object.id == null) {
            throw new ParameterMissing("Route parameter missing: id");
          }
          property = object.id;
        } else {
          property = object;
        }
        if (this.get_object_type(property) === "function") {
          property = property.call(object);
        }
      }
      return property.toString();
    },
    clone: function(obj) {
      var attr, copy, key;
      if ((obj == null) || "object" !== this.get_object_type(obj)) {
        return obj;
      }
      copy = obj.constructor();
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        attr = obj[key];
        copy[key] = attr;
      }
      return copy;
    },
    merge: function() {
      var tap, xs;
      xs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      tap = function(o, fn) {
        fn(o);
        return o;
      };
      if ((xs != null ? xs.length : void 0) > 0) {
        return tap({}, function(m) {
          var j, k, len, results, v, x;
          results = [];
          for (j = 0, len = xs.length; j < len; j++) {
            x = xs[j];
            results.push((function() {
              var results1;
              results1 = [];
              for (k in x) {
                v = x[k];
                results1.push(m[k] = v);
              }
              return results1;
            })());
          }
          return results;
        });
      }
    },
    normalize_options: function(parts, required_parts, default_options, actual_parameters) {
      var i, j, key, len, options, part, parts_options, result, route_parts, url_parameters, use_all_parts, value;
      options = this.extract_options(parts.length, actual_parameters);
      if (actual_parameters.length > parts.length) {
        throw new Error("Too many parameters provided for path");
      }
      use_all_parts = actual_parameters.length > required_parts.length;
      parts_options = {};
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        use_all_parts = true;
        if (this.indexOf(parts, key) >= 0) {
          parts_options[key] = value;
        }
      }
      options = this.merge(this.configuration.default_url_options, default_options, options);
      result = {};
      url_parameters = {};
      result['url_parameters'] = url_parameters;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        value = options[key];
        if (this.indexOf(ReservedOptions, key) >= 0) {
          result[key] = value;
        } else {
          url_parameters[key] = value;
        }
      }
      route_parts = use_all_parts ? parts : required_parts;
      i = 0;
      for (j = 0, len = route_parts.length; j < len; j++) {
        part = route_parts[j];
        if (i < actual_parameters.length) {
          if (!parts_options.hasOwnProperty(part)) {
            url_parameters[part] = actual_parameters[i];
            ++i;
          }
        }
      }
      return result;
    },
    build_route: function(parts, required_parts, default_options, route, full_url, args) {
      var options, parameters, result, url, url_params;
      args = Array.prototype.slice.call(args);
      options = this.normalize_options(parts, required_parts, default_options, args);
      parameters = options['url_parameters'];
      result = "" + (this.get_prefix()) + (this.visit(route, parameters));
      url = Utils.clean_path(result);
      if (options['trailing_slash'] === true) {
        url = url.replace(/(.*?)[\/]?$/, "$1/");
      }
      if ((url_params = this.serialize(parameters)).length) {
        url += "?" + url_params;
      }
      url += options.anchor ? "#" + options.anchor : "";
      if (full_url) {
        url = this.route_url(options) + url;
      }
      return url;
    },
    visit: function(route, parameters, optional) {
      var left, left_part, right, right_part, type, value;
      if (optional == null) {
        optional = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return this.visit(left, parameters, true);
        case NodeTypes.STAR:
          return this.visit_globbing(left, parameters, true);
        case NodeTypes.LITERAL:
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
          return left;
        case NodeTypes.CAT:
          left_part = this.visit(left, parameters, optional);
          right_part = this.visit(right, parameters, optional);
          if (optional && ((this.is_optional_node(left[0]) && !left_part) || ((this.is_optional_node(right[0])) && !right_part))) {
            return "";
          }
          return "" + left_part + right_part;
        case NodeTypes.SYMBOL:
          value = parameters[left];
          delete parameters[left];
          if (value != null) {
            return this.encode_segment(this.path_identifier(value));
          }
          if (optional) {
            return "";
          } else {
            throw new ParameterMissing("Route parameter missing: " + left);
          }
          break;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    encode_segment: function(segment) {
      return segment.replace(UriEncoderSegmentRegex, function(str) {
        return encodeURIComponent(str);
      });
    },
    is_optional_node: function(node) {
      return this.indexOf([NodeTypes.STAR, NodeTypes.SYMBOL, NodeTypes.CAT], node) >= 0;
    },
    build_path_spec: function(route, wildcard) {
      var left, right, type;
      if (wildcard == null) {
        wildcard = false;
      }
      type = route[0], left = route[1], right = route[2];
      switch (type) {
        case NodeTypes.GROUP:
          return "(" + (this.build_path_spec(left)) + ")";
        case NodeTypes.CAT:
          return "" + (this.build_path_spec(left)) + (this.build_path_spec(right));
        case NodeTypes.STAR:
          return this.build_path_spec(left, true);
        case NodeTypes.SYMBOL:
          if (wildcard === true) {
            return "" + (left[0] === '*' ? '' : '*') + left;
          } else {
            return ":" + left;
          }
          break;
        case NodeTypes.SLASH:
        case NodeTypes.DOT:
        case NodeTypes.LITERAL:
          return left;
        default:
          throw new Error("Unknown Rails node type");
      }
    },
    visit_globbing: function(route, parameters, optional) {
      var left, right, type, value;
      type = route[0], left = route[1], right = route[2];
      value = parameters[left];
      delete parameters[left];
      if (value == null) {
        return this.visit(route, parameters, optional);
      }
      value = (function() {
        switch (this.get_object_type(value)) {
          case "array":
            return value.join("/");
          default:
            return value;
        }
      }).call(this);
      if (DeprecatedGlobbingBehavior) {
        return this.path_identifier(value);
      } else {
        return encodeURI(this.path_identifier(value));
      }
    },
    get_prefix: function() {
      var prefix;
      prefix = this.configuration.prefix;
      if (prefix !== "") {
        prefix = (prefix.match("/$") ? prefix : prefix + "/");
      }
      return prefix;
    },
    route: function(parts_table, default_options, route_spec, full_url) {
      var j, len, part, parts, path_fn, ref, required, required_parts;
      required_parts = [];
      parts = [];
      for (j = 0, len = parts_table.length; j < len; j++) {
        ref = parts_table[j], part = ref[0], required = ref[1];
        parts.push(part);
        if (required) {
          required_parts.push(part);
        }
      }
      path_fn = function() {
        return Utils.build_route(parts, required_parts, default_options, route_spec, full_url, arguments);
      };
      path_fn.required_params = required_parts;
      path_fn.toString = function() {
        return Utils.build_path_spec(route_spec);
      };
      return path_fn;
    },
    route_url: function(route_defaults) {
      var hostname, port, protocol, subdomain;
      if (typeof route_defaults === 'string') {
        return route_defaults;
      }
      hostname = route_defaults.host || Utils.current_host();
      if (!hostname) {
        return '';
      }
      subdomain = route_defaults.subdomain ? route_defaults.subdomain + '.' : '';
      protocol = route_defaults.protocol || Utils.current_protocol();
      port = route_defaults.port || (!route_defaults.host ? Utils.current_port() : void 0);
      port = port ? ":" + port : '';
      return protocol + "://" + subdomain + hostname + port;
    },
    has_location: function() {
      return (typeof window !== "undefined" && window !== null ? window.location : void 0) != null;
    },
    current_host: function() {
      if (this.has_location()) {
        return window.location.hostname;
      } else {
        return null;
      }
    },
    current_protocol: function() {
      if (this.has_location() && window.location.protocol !== '') {
        return window.location.protocol.replace(/:$/, '');
      } else {
        return 'http';
      }
    },
    current_port: function() {
      if (this.has_location() && window.location.port !== '') {
        return window.location.port;
      } else {
        return '';
      }
    },
    _classToTypeCache: null,
    _classToType: function() {
      var j, len, name, ref;
      if (this._classToTypeCache != null) {
        return this._classToTypeCache;
      }
      this._classToTypeCache = {};
      ref = "Boolean Number String Function Array Date RegExp Object Error".split(" ");
      for (j = 0, len = ref.length; j < len; j++) {
        name = ref[j];
        this._classToTypeCache["[object " + name + "]"] = name.toLowerCase();
      }
      return this._classToTypeCache;
    },
    get_object_type: function(obj) {
      if (this.jQuery && (this.jQuery.type != null)) {
        return this.jQuery.type(obj);
      }
      if (obj == null) {
        return "" + obj;
      }
      if (typeof obj === "object" || typeof obj === "function") {
        return this._classToType()[Object.prototype.toString.call(obj)] || "object";
      } else {
        return typeof obj;
      }
    },
    indexOf: function(array, element) {
      if (Array.prototype.indexOf) {
        return array.indexOf(element);
      } else {
        return this.indexOfImplementation(array, element);
      }
    },
    indexOfImplementation: function(array, element) {
      var el, i, j, len, result;
      result = -1;
      for (i = j = 0, len = array.length; j < len; i = ++j) {
        el = array[i];
        if (el === element) {
          result = i;
        }
      }
      return result;
    },
    namespace: function(root, namespace, routes) {
      var index, j, len, part, parts;
      parts = namespace ? namespace.split(".") : [];
      if (parts.length === 0) {
        return routes;
      }
      for (index = j = 0, len = parts.length; j < len; index = ++j) {
        part = parts[index];
        if (index < parts.length - 1) {
          root = (root[part] || (root[part] = {}));
        } else {
          return root[part] = routes;
        }
      }
    },
    configure: function(new_config) {
      return this.configuration = this.merge(this.configuration, new_config);
    },
    config: function() {
      return this.clone(this.configuration);
    },
    make: function() {
      var routes;
      routes = {
// api_v1_chatbot_tracks => /api/v1/chatbot_tracks(.:format)
  // function(options)
  api_v1_chatbot_tracks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"chatbot_tracks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_chatbots => /api/v1/chatbots(.:format)
  // function(options)
  api_v1_chatbots_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"chatbots",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_ivr_tracks => /api/v1/ivr_tracks(.:format)
  // function(options)
  api_v1_ivr_tracks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"ivr_tracks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_ivrs => /api/v1/ivrs(.:format)
  // function(options)
  api_v1_ivrs_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"ivrs",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_map_preview => /api/v1/map_preview(.:format)
  // function(options)
  api_v1_map_preview_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"map_preview",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_me => /api/v1/me(.:format)
  // function(options)
  api_v1_me_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"me",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// api_v1_site => /api/v1/sites/:site_code(.:format)
  // function(site_code, options)
  api_v1_site_path: Utils.route([["site_code",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"site_code",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// api_v1_social_providers => /api/v1/social_providers(.:format)
  // function(options)
  api_v1_social_providers_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"social_providers",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// bots_messages => /bots/messages(.:format)
  // function(options)
  bots_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"messages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// bots_sessions => /bots/sessions(.:format)
  // function(options)
  bots_sessions_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"sessions",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// bots_tracks => /bots/tracks(.:format)
  // function(options)
  bots_tracks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"tracks",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// cancel_user_registration => /users/cancel(.:format)
  // function(options)
  cancel_user_registration_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"cancel",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// chatbot_bots_messages => /bots/messages/chatbot(.:format)
  // function(options)
  chatbot_bots_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"chatbot",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// chatbot_bots_sessions => /bots/sessions/chatbot(.:format)
  // function(options)
  chatbot_bots_sessions_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[6,"chatbot",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// chatbot_bots_tracks => /bots/tracks/chatbot(.:format)
  // function(options)
  chatbot_bots_tracks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"tracks",false],[2,[7,"/",false],[2,[6,"chatbot",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// chatbot_mark_as_completed_bots_sessions => /bots/sessions/chatbot/mark_as_completed(.:format)
  // function(options)
  chatbot_mark_as_completed_bots_sessions_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[6,"chatbot",false],[2,[7,"/",false],[2,[6,"mark_as_completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// chatbot_preview_map_bots_messages => /bots/messages/chatbot/preview_map(.:format)
  // function(options)
  chatbot_preview_map_bots_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"chatbot",false],[2,[7,"/",false],[2,[6,"preview_map",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// chatbot_preview_map_bots_sessions => /bots/sessions/chatbot/preview_map(.:format)
  // function(options)
  chatbot_preview_map_bots_sessions_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[6,"chatbot",false],[2,[7,"/",false],[2,[6,"preview_map",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// dashboard => (/:locale)/dashboard(.:format)
  // function(options)
  dashboard_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dashboard",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// destroy_user_session => /users/sign_out(.:format)
  // function(options)
  destroy_user_session_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_out",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// dictionaries => (/:locale)/dictionaries(.:format)
  // function(options)
  dictionaries_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// dictionary => (/:locale)/dictionaries/:id(.:format)
  // function(id, options)
  dictionary_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// districts => (/:locale)/districts(.:format)
  // function(options)
  districts_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"districts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// download_sites => (/:locale)/sites/download(.:format)
  // function(options)
  download_sites_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"download",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// edit_dictionary => (/:locale)/dictionaries/:id/edit(.:format)
  // function(id, options)
  edit_dictionary_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// edit_rails_conductor_inbound_email => /rails/conductor/action_mailbox/inbound_emails/:id/edit(.:format)
  // function(id, options)
  edit_rails_conductor_inbound_email_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"conductor",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// edit_site => (/:locale)/sites/:id/edit(.:format)
  // function(id, options)
  edit_site_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// edit_site_api_key => (/:locale)/sites/:site_id/api_key/edit(.:format)
  // function(site_id, options)
  edit_site_api_key_path: Utils.route([["locale",false],["site_id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"site_id",false],[2,[7,"/",false],[2,[6,"api_key",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// edit_template => (/:locale)/templates/:id/edit(.:format)
  // function(id, options)
  edit_template_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"templates",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// edit_user => (/:locale)/users/:id/edit(.:format)
  // function(id, options)
  edit_user_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// edit_user_password => /users/password/edit(.:format)
  // function(options)
  edit_user_password_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// edit_user_registration => /users/edit(.:format)
  // function(options)
  edit_user_registration_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"edit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// help_settings => (/:locale)/settings/help(.:format)
  // function(options)
  help_settings_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"help",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// home => (/:locale)/home(.:format)
  // function(options)
  home_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"home",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// import_sites => (/:locale)/sites/import(.:format)
  // function(options)
  import_sites_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// ivr_bots_messages => /bots/messages/ivr(.:format)
  // function(options)
  ivr_bots_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"ivr",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// ivr_bots_sessions => /bots/sessions/ivr(.:format)
  // function(options)
  ivr_bots_sessions_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"sessions",false],[2,[7,"/",false],[2,[6,"ivr",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// ivr_bots_tracks => /bots/tracks/ivr(.:format)
  // function(options)
  ivr_bots_tracks_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"tracks",false],[2,[7,"/",false],[2,[6,"ivr",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// location => (/:locale)/location(.:format)
  // function(options)
  location_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"location",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// manifest => /manifest(.:format)
  // function(options)
  manifest_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"manifest",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// mark_as_completed_api_v1_chatbots => /api/v1/chatbots/mark_as_completed(.:format)
  // function(options)
  mark_as_completed_api_v1_chatbots_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"api",false],[2,[7,"/",false],[2,[6,"v1",false],[2,[7,"/",false],[2,[6,"chatbots",false],[2,[7,"/",false],[2,[6,"mark_as_completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// mark_as_completed_bots_messages => /bots/messages/mark_as_completed(.:format)
  // function(options)
  mark_as_completed_bots_messages_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"bots",false],[2,[7,"/",false],[2,[6,"messages",false],[2,[7,"/",false],[2,[6,"mark_as_completed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_dictionary => (/:locale)/dictionaries/new(.:format)
  // function(options)
  new_dictionary_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// new_import_sites => (/:locale)/sites/new_import(.:format)
  // function(options)
  new_import_sites_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"new_import",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// new_rails_conductor_inbound_email => /rails/conductor/action_mailbox/inbound_emails/new(.:format)
  // function(options)
  new_rails_conductor_inbound_email_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"conductor",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// new_site => (/:locale)/sites/new(.:format)
  // function(options)
  new_site_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// new_site_api_key => (/:locale)/sites/:site_id/api_key/new(.:format)
  // function(site_id, options)
  new_site_api_key_path: Utils.route([["locale",false],["site_id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"site_id",false],[2,[7,"/",false],[2,[6,"api_key",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]),
// new_template => (/:locale)/templates/new(.:format)
  // function(options)
  new_template_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"templates",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// new_user => (/:locale)/users/new(.:format)
  // function(options)
  new_user_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// new_user_confirmation => /users/confirmation/new(.:format)
  // function(options)
  new_user_confirmation_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"confirmation",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_user_password => /users/password/new(.:format)
  // function(options)
  new_user_password_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[2,[7,"/",false],[2,[6,"new",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// new_user_registration => /users/sign_up(.:format)
  // function(options)
  new_user_registration_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_up",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// new_user_session => /users/sign_in(.:format)
  // function(options)
  new_user_session_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// preview_view_component => /rails/view_components/*path(.:format)
  // function(path, options)
  preview_view_component_path: Utils.route([["path",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"view_components",false],[2,[7,"/",false],[2,[5,[3,"path",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// preview_view_components => /rails/view_components(.:format)
  // function(options)
  preview_view_components_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"view_components",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// provinces => (/:locale)/provinces(.:format)
  // function(options)
  provinces_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"provinces",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// pumi => /pumi
  // function(options)
  pumi_path: Utils.route([], {}, [2,[7,"/",false],[6,"pumi",false]]),
// pumi.provinces => /pumi/provinces(.:format)
  // function(options)
  pumi_provinces_path: Utils.route([["format",false]], {}, [2,[2,[2,[7,"/",false],[6,"pumi",false]],[7,"/",false]],[2,[6,"provinces",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// pumi.districts => /pumi/districts(.:format)
  // function(options)
  pumi_districts_path: Utils.route([["format",false]], {}, [2,[2,[2,[7,"/",false],[6,"pumi",false]],[7,"/",false]],[2,[6,"districts",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// pumi.communes => /pumi/communes(.:format)
  // function(options)
  pumi_communes_path: Utils.route([["format",false]], {}, [2,[2,[2,[7,"/",false],[6,"pumi",false]],[7,"/",false]],[2,[6,"communes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// pumi.villages => /pumi/villages(.:format)
  // function(options)
  pumi_villages_path: Utils.route([["format",false]], {}, [2,[2,[2,[7,"/",false],[6,"pumi",false]],[7,"/",false]],[2,[6,"villages",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// quotas => (/:locale)/quotas(.:format)
  // function(options)
  quotas_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"quotas",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// rails_blob_representation => /rails/active_storage/representations/:signed_blob_id/:variation_key/*filename(.:format)
  // function(signed_blob_id, variation_key, filename, options)
  rails_blob_representation_path: Utils.route([["signed_blob_id",true],["variation_key",true],["filename",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"active_storage",false],[2,[7,"/",false],[2,[6,"representations",false],[2,[7,"/",false],[2,[3,"signed_blob_id",false],[2,[7,"/",false],[2,[3,"variation_key",false],[2,[7,"/",false],[2,[5,[3,"filename",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]]]),
// rails_conductor_inbound_email => /rails/conductor/action_mailbox/inbound_emails/:id(.:format)
  // function(id, options)
  rails_conductor_inbound_email_path: Utils.route([["id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"conductor",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rails_conductor_inbound_email_reroute => /rails/conductor/action_mailbox/:inbound_email_id/reroute(.:format)
  // function(inbound_email_id, options)
  rails_conductor_inbound_email_reroute_path: Utils.route([["inbound_email_id",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"conductor",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[3,"inbound_email_id",false],[2,[7,"/",false],[2,[6,"reroute",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rails_conductor_inbound_emails => /rails/conductor/action_mailbox/inbound_emails(.:format)
  // function(options)
  rails_conductor_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"conductor",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_direct_uploads => /rails/active_storage/direct_uploads(.:format)
  // function(options)
  rails_direct_uploads_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"active_storage",false],[2,[7,"/",false],[2,[6,"direct_uploads",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// rails_disk_service => /rails/active_storage/disk/:encoded_key/*filename(.:format)
  // function(encoded_key, filename, options)
  rails_disk_service_path: Utils.route([["encoded_key",true],["filename",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"active_storage",false],[2,[7,"/",false],[2,[6,"disk",false],[2,[7,"/",false],[2,[3,"encoded_key",false],[2,[7,"/",false],[2,[5,[3,"filename",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rails_info => /rails/info(.:format)
  // function(options)
  rails_info_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// rails_info_properties => /rails/info/properties(.:format)
  // function(options)
  rails_info_properties_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"properties",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// rails_info_routes => /rails/info/routes(.:format)
  // function(options)
  rails_info_routes_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"info",false],[2,[7,"/",false],[2,[6,"routes",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// rails_mailers => /rails/mailers(.:format)
  // function(options)
  rails_mailers_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"mailers",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// rails_mailgun_inbound_emails => /rails/action_mailbox/mailgun/inbound_emails/mime(.:format)
  // function(options)
  rails_mailgun_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"mailgun",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[2,[7,"/",false],[2,[6,"mime",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// rails_mandrill_inbound_emails => /rails/action_mailbox/mandrill/inbound_emails(.:format)
  // function(options)
  rails_mandrill_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"mandrill",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_mandrill_inbound_health_check => /rails/action_mailbox/mandrill/inbound_emails(.:format)
  // function(options)
  rails_mandrill_inbound_health_check_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"mandrill",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_postmark_inbound_emails => /rails/action_mailbox/postmark/inbound_emails(.:format)
  // function(options)
  rails_postmark_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"postmark",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_relay_inbound_emails => /rails/action_mailbox/relay/inbound_emails(.:format)
  // function(options)
  rails_relay_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"relay",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_sendgrid_inbound_emails => /rails/action_mailbox/sendgrid/inbound_emails(.:format)
  // function(options)
  rails_sendgrid_inbound_emails_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"action_mailbox",false],[2,[7,"/",false],[2,[6,"sendgrid",false],[2,[7,"/",false],[2,[6,"inbound_emails",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// rails_service_blob => /rails/active_storage/blobs/:signed_id/*filename(.:format)
  // function(signed_id, filename, options)
  rails_service_blob_path: Utils.route([["signed_id",true],["filename",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"active_storage",false],[2,[7,"/",false],[2,[6,"blobs",false],[2,[7,"/",false],[2,[3,"signed_id",false],[2,[7,"/",false],[2,[5,[3,"filename",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]]]),
// root => /(:locale)(.:format)
  // function(options)
  root_path: Utils.route([["locale",false],["format",false]], {}, [2,[7,"/",false],[2,[1,[3,"locale",false],false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// set_criteria_dictionaries => (/:locale)/dictionaries/set_criteria(.:format)
  // function(options)
  set_criteria_dictionaries_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[6,"set_criteria",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// set_most_request_dictionaries => (/:locale)/dictionaries/set_most_request(.:format)
  // function(options)
  set_most_request_dictionaries_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[6,"set_most_request",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// set_service_accessed_dictionaries => (/:locale)/dictionaries/set_service_accessed(.:format)
  // function(options)
  set_service_accessed_dictionaries_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[6,"set_service_accessed",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// set_user_visit_dictionaries => (/:locale)/dictionaries/set_user_visit(.:format)
  // function(options)
  set_user_visit_dictionaries_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"dictionaries",false],[2,[7,"/",false],[2,[6,"set_user_visit",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// settings => (/:locale)/settings(.:format)
  // function(options)
  settings_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"settings",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// sidekiq_web => /sidekiq
  // function(options)
  sidekiq_web_path: Utils.route([], {}, [2,[7,"/",false],[6,"sidekiq",false]]),
// site => (/:locale)/sites/:id(.:format)
  // function(id, options)
  site_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// site_api_key => (/:locale)/sites/:site_id/api_key(.:format)
  // function(site_id, options)
  site_api_key_path: Utils.route([["locale",false],["site_id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"site_id",false],[2,[7,"/",false],[2,[6,"api_key",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// site_setting => (/:locale)/sites/:site_id/setting(.:format)
  // function(site_id, options)
  site_setting_path: Utils.route([["locale",false],["site_id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[2,[7,"/",false],[2,[3,"site_id",false],[2,[7,"/",false],[2,[6,"setting",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// sites => (/:locale)/sites(.:format)
  // function(options)
  sites_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"sites",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// telegram_bot_settings => (/:locale)/settings/telegram_bot(.:format)
  // function(options)
  telegram_bot_settings_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"settings",false],[2,[7,"/",false],[2,[6,"telegram_bot",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// telegram_webhook => /telegram
  // function(options)
  telegram_webhook_path: Utils.route([], {}, [2,[7,"/",false],[6,"telegram",false]]),
// template => (/:locale)/templates/:id(.:format)
  // function(id, options)
  template_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"templates",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// templates => (/:locale)/templates(.:format)
  // function(options)
  templates_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"templates",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// tickets => (/:locale)/tickets(.:format)
  // function(options)
  tickets_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"tickets",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// update_rails_disk_service => /rails/active_storage/disk/:encoded_token(.:format)
  // function(encoded_token, options)
  update_rails_disk_service_path: Utils.route([["encoded_token",true],["format",false]], {}, [2,[7,"/",false],[2,[6,"rails",false],[2,[7,"/",false],[2,[6,"active_storage",false],[2,[7,"/",false],[2,[6,"disk",false],[2,[7,"/",false],[2,[3,"encoded_token",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// user => (/:locale)/users/:id(.:format)
  // function(id, options)
  user_path: Utils.route([["locale",false],["id",true],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[3,"id",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]),
// user_confirmation => /users/confirmation(.:format)
  // function(options)
  user_confirmation_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"confirmation",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// user_instedd_omniauth_authorize => /users/auth/instedd(.:format)
  // function(options)
  user_instedd_omniauth_authorize_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"instedd",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]),
// user_instedd_omniauth_callback => /users/auth/instedd/callback(.:format)
  // function(options)
  user_instedd_omniauth_callback_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"auth",false],[2,[7,"/",false],[2,[6,"instedd",false],[2,[7,"/",false],[2,[6,"callback",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]]),
// user_password => /users/password(.:format)
  // function(options)
  user_password_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"password",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// user_registration => /users(.:format)
  // function(options)
  user_registration_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]]),
// user_session => /users/sign_in(.:format)
  // function(options)
  user_session_path: Utils.route([["format",false]], {}, [2,[7,"/",false],[2,[6,"users",false],[2,[7,"/",false],[2,[6,"sign_in",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]),
// users => (/:locale)/users(.:format)
  // function(options)
  users_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"users",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// welcome => (/:locale)/welcome(.:format)
  // function(options)
  welcome_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"welcome",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]),
// welcomes_q_access_info => (/:locale)/welcomes/q/access-info(.:format)
  // function(options)
  welcomes_q_access_info_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"welcomes",false],[2,[7,"/",false],[2,[6,"q",false],[2,[7,"/",false],[2,[6,"access-info",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// welcomes_q_feedback_trend => (/:locale)/welcomes/q/feedback-trend(.:format)
  // function(options)
  welcomes_q_feedback_trend_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"welcomes",false],[2,[7,"/",false],[2,[6,"q",false],[2,[7,"/",false],[2,[6,"feedback-trend",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]]),
// welcomes_q_service_tracked => (/:locale)/welcomes/q/service-tracked(.:format)
  // function(options)
  welcomes_q_service_tracked_path: Utils.route([["locale",false],["format",false]], {}, [2,[1,[2,[7,"/",false],[3,"locale",false]],false],[2,[7,"/",false],[2,[6,"welcomes",false],[2,[7,"/",false],[2,[6,"q",false],[2,[7,"/",false],[2,[6,"service-tracked",false],[1,[2,[8,".",false],[3,"format",false]],false]]]]]]]])}
;
      routes.configure = function(config) {
        return Utils.configure(config);
      };
      routes.config = function() {
        return Utils.config();
      };
      routes.default_serializer = function(object, prefix) {
        return Utils.default_serializer(object, prefix);
      };
      return Object.assign({
        "default": routes
      }, routes);
    }
  };

  result = Utils.make();

  if (typeof define === "function" && define.amd) {
    define([], function() {
      return result;
    });
  } else if (typeof module !== "undefined" && module !== null) {
    try {
      module.exports = result;
    } catch (error1) {
      error = error1;
      if (error.name !== 'TypeError') {
        throw error;
      }
    }
  } else {
    Utils.namespace(this, null, result);
  }

  return result;

}).call(this);
